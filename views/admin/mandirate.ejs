<%- include('common/header') %>

<div class="main-content" id="mainContent">
  <div class="container mt-4">
    <h2>Mandi Rates</h2>

    <!-- FILTERS: OnSelect-wise, instant search -->
    <div class="row g-2 mb-3">
      <div class="col-md-3">
        <select id="filterState" class="form-select">
          <option value="">Select State</option>
          <% states.forEach(state => { %>
            <option value="<%= state._id %>"><%= state.name %></option>
          <% }) %>
        </select>
      </div>
      <div class="col-md-3">
        <select id="filterDistrict" class="form-select">
          <option value="">Select District</option>
        </select>
      </div>
      <div class="col-md-3">
        <select id="filterMandi" class="form-select">
          <option value="">Select Mandi</option>
        </select>
      </div>
      <div class="col-md-3">
        <input type="text" id="searchInput" class="form-control" placeholder="Search...">
      </div>
      <div class="col-md-3">
        <select id="filterDays" class="form-select">
          <option value="">All Time</option>
          <option value="1">Last 1 Day</option>
          <option value="7">Last 7 Days</option>
          <option value="30">Last 30 Days</option>
          <option value="90">Last 90 Days</option>
        </select>
      </div>
    </div>

    <!-- Export buttons -->
    <div class="row mb-3">
      <div class="col-auto">
        <button id="downloadPDF" class="btn btn-primary">Download PDF</button>
        <button id="downloadExcel" class="btn btn-success">Download Excel</button>
        <button id="downloadCSV" class="btn btn-info">Download CSV</button>
        <button id="toggleGrouped" class="btn btn-warning">Toggle Grouped View</button>
        <button id="downloadGroupedPDF" class="btn btn-danger">Download Grouped PDF</button>
        <button id="viewLastChanges" class="btn btn-secondary">View Last Changes</button>
      </div>
    </div>

    <!-- Form for adding/updating rates -->
    <form id="mandiRateForm" action="/admin/mandirate/add" method="POST">
      <input type="hidden" name="state" id="formState">
      <input type="hidden" name="district" id="formDistrict">
      <input type="hidden" name="mandi" id="formMandi">
      <div class="mb-3">
        <label for="existingMandiRate" class="form-label">Add to Existing Mandi Rate (Optional)</label>
        <select id="existingMandiRate" class="form-select" onchange="updateFormAction()">
          <option value="">Create New Mandi Rate</option>
          <% rates.forEach(rate => { %>
            <option value="<%= rate._id %>">
              <%= rate.mandi?.name %> (<%= rate.state?.name %> / <%= rate.district %>)
            </option>
          <% }) %>
        </select>
      </div>
      <table class="table table-bordered" id="mandiRateTable">
        <thead>
          <tr>
            <th>Sl No</th>
            <th>Mandi Name</th>
            <th>Address (State/District/Mandi)</th>
            <th>Commodity</th>
            <th>Min Price</th>
            <th>Max Price</th>
            <th>Est. Qty</th>
            <th>Last Updated</th>
            <th>Action</th>
          </tr>
        </thead>
        <tbody id="mandiRateRows">
          <% let sno = 1; %>
          <% rates.forEach((rate) => { %>
            <% rate.rates.forEach((item) => { %>
              <tr class="dataRow"
                  data-state="<%= rate.state?._id %>"
                  data-district="<%= rate.district %>"
                  data-mandi="<%= rate.mandi?._id %>"
                  data-mandirateid="<%= rate._id %>"
                  data-commodityid="<%= item.commodity?._id %>">
                <td class="sno"><%= sno++ %></td>
                <td><%= rate.mandi?.name %></td>
                <td>
                  <span><%= rate.state?.name %></span> /
                  <span><%= rate.district %></span> /
                  <span><%= rate.mandi?.name %></span>
                </td>
                <td class="commodity-cell">
                  <span class="cell-text"><%= item.commodity?.name %></span>
                </td>
                <td class="editable">
                  <span class="cell-text"><%= item.minimum %></span>
                  <input type="number" class="form-control cell-input" min="0" step="0.01" value="<%= item.minimum %>" style="display:none;" required>
                </td>
                <td class="editable">
                  <span class="cell-text"><%= item.maximum %></span>
                  <input type="number" class="form-control cell-input" min="0" step="0.01" value="<%= item.maximum %>" style="display:none;" required>
                </td>
                <td class="editable">
                  <span class="cell-text"><%= item.estimatedArrival ?? "" %></span>
                  <input type="number" class="form-control cell-input" min="0" step="0.01" value="<%= item.estimatedArrival ?? "" %>" style="display:none;">
                </td>
                <td>
                  <span class="last-updated">
                    <% 
                      let updatedAt = item.updatedAt || rate.updatedAt;
                      function formatDate(dateStr) {
                        if (!dateStr) return "";
                        const dateObj = new Date(dateStr);
                        return dateObj.toLocaleString('en-IN', {
                          day: '2-digit', month: '2-digit', year: 'numeric',
                          hour: '2-digit', minute: '2-digit'
                        });
                      }
                    %>
                    <%= formatDate(updatedAt) %>
                  </span>
                </td>
                <td>
                  <button type="button" class="btn btn-sm btn-primary editRowBtn" title="Edit"><i class="bi bi-pencil-square"></i></button>
                  <button type="button" class="btn btn-sm btn-success saveRowBtn" style="display:none;" title="Update"><i class="bi bi-check2"></i></button>
                  <button type="button" class="btn btn-sm btn-secondary cancelRowBtn" style="display:none;" title="Cancel"><i class="bi bi-x"></i></button>
                  <form action="/admin/mandirate/delete-commodity/<%= rate._id %>/<%= item.commodity?._id %>" method="POST" style="display:inline;">
                    <button type="submit" class="btn btn-sm btn-danger" onclick="return confirm('Delete this rate?')" title="Delete">
                      <i class="bi bi-trash"></i>
                    </button>
                  </form>
                </td>
              </tr>
            <% }) %>
          <% }) %>
          <!-- ADD ROW (always at bottom, can add more with plus icon, and Save All) -->
          <tr class="addRow">
            <td class="sno"></td>
            <td>
              <input type="text" class="form-control addMandiName" value="" readonly>
            </td>
            <td>
              <input type="text" class="form-control addAddress" value="" readonly>
            </td>
            <td>
              <select name="commodity_ids[]" class="form-select" required>
                <option value="">Select Commodity</option>
                <% commodities.forEach(com => { %>
                  <option value="<%= com._id %>"><%= com.name %></option>
                <% }) %>
              </select>
            </td>
            <td><input type="number" name="minimums[]" class="form-control" min="0" step="0.01" required></td>
            <td><input type="number" name="maximums[]" class="form-control" min="0" step="0.01" required></td>
            <td><input type="number" name="arrivals[]" class="form-control" min="0" step="0.01"></td>
            <td>-</td>
            <td>
              <button type="button" class="btn btn-success addRowBtn"><i class="bi bi-plus-circle"></i></button>
              <button type="button" class="btn btn-danger removeRowBtn" style="display:none;"><i class="bi bi-x-circle"></i></button>
            </td>
          </tr>
        </tbody>
      </table>
      <button type="submit" class="btn btn-success" id="saveAllBtn">Save All</button>
    </form>
  </div>

  <!-- Last Changes Modal -->
  <div class="modal fade" id="lastChangesModal" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog modal-xl">
      <div class="modal-content">
        <div class="modal-header">
          <h5 class="modal-title">Last Changes in Mandi Rates</h5>
          <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
        </div>
        <div class="modal-body">
          <select id="changesDays" class="form-select mb-3">
            <option value="">All Time</option>
            <option value="1">Last 1 Day</option>
            <option value="7">Last 7 Days</option>
            <option value="30">Last 30 Days</option>
            <option value="90">Last 90 Days</option>
          </select>
          <table class="table table-bordered" id="changesTable">
            <thead>
              <tr>
                <th>Sl No</th>
                <th>Mandi Name</th>
                <th>Address</th>
                <th>Commodity</th>
                <th>Min Price</th>
                <th>Max Price</th>
                <th>Est. Qty</th>
                <th>Last Updated</th>
              </tr>
            </thead>
            <tbody id="changesRows">
            </tbody>
          </table>
        </div>
      </div>
    </div>
  </div>

  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.5/font/bootstrap-icons.css">

  <script>
    document.addEventListener("DOMContentLoaded", function() {
      const filterState = document.getElementById("filterState");
      const filterDistrict = document.getElementById("filterDistrict");
      const filterMandi = document.getElementById("filterMandi");
      const searchInput = document.getElementById("searchInput");
      const filterDays = document.getElementById("filterDays");
      const mandiRateRows = document.getElementById("mandiRateRows");
      const mandiRateForm = document.getElementById("mandiRateForm");
      const existingMandiRate = document.getElementById("existingMandiRate");
      const toggleGrouped = document.getElementById("toggleGrouped");
      let mandis = [];
      let isGrouped = false;

      // Parse date function
      function parseDate(str) {
        if (!str) return new Date(0);
        const [datePart, timePart] = str.split(', ');
        const [day, month, year] = datePart.split('/');
        const [hour, minute] = timePart.split(':');
        return new Date(year, month - 1, day, hour, minute);
      }

      // Get group keys from row
      function getGroupKeys(row) {
        const addressSpans = row.querySelector('td:nth-child(3)').querySelectorAll('span');
        const stateName = addressSpans[0].textContent.trim();
        const district = addressSpans[1].textContent.trim();
        const mandiName = addressSpans[2].textContent.trim();
        const commodity = row.querySelector('td:nth-child(4) .cell-text').textContent.trim();
        return { stateName, district, mandiName, commodity };
      }

      // Update form action based on existingMandiRate selection
      function updateFormAction() {
        const mandiRateId = existingMandiRate.value;
        mandiRateForm.action = mandiRateId
          ? `/admin/mandirate/add-commodities/${mandiRateId}`
          : "/admin/mandirate/add";
      }

      // State, District, Mandi filters
      filterState.addEventListener("change", async function() {
        filterDistrict.innerHTML = '<option value="">Select District</option>';
        filterMandi.innerHTML = '<option value="">Select Mandi</option>';
        document.getElementById("formState").value = this.value;
        if (!this.value) {
          filterTable();
          updateAddRowFields();
          return;
        }
        const res = await fetch(`/admin/mandirate/districts/${this.value}`);
        const districts = await res.json();
        districts.forEach(d => {
          const opt = document.createElement("option");
          opt.value = d;
          opt.textContent = d;
          filterDistrict.appendChild(opt);
        });
        filterTable();
        updateAddRowFields();
      });

      filterDistrict.addEventListener("change", async function() {
        filterMandi.innerHTML = '<option value="">Select Mandi</option>';
        document.getElementById("formDistrict").value = this.value;
        if (!this.value) {
          filterTable();
          updateAddRowFields();
          return;
        }
        const res = await fetch(`/admin/mandirate/mandis/${this.value}`);
        mandis = await res.json();
        mandis.forEach(m => {
          const opt = document.createElement("option");
          opt.value = m.id;
          opt.textContent = m.name;
          filterMandi.appendChild(opt);
        });
        filterTable();
        updateAddRowFields();
      });

      filterMandi.addEventListener("change", function() {
        document.getElementById("formMandi").value = this.value;
        filterTable();
        updateAddRowFields();
      });

      searchInput.addEventListener("input", filterTable);
      filterDays.addEventListener("change", filterTable);

      toggleGrouped.addEventListener("click", function() {
        isGrouped = !isGrouped;
        toggleGrouped.textContent = isGrouped ? "Toggle Flat View" : "Toggle Grouped View";
        filterTable();
      });

      function filterTable() {
        const state = filterState.value;
        const district = filterDistrict.value;
        const mandi = filterMandi.value;
        const searchVal = searchInput.value.toLowerCase();
        const daysVal = filterDays.value;
        const threshold = daysVal ? new Date(Date.now() - daysVal * 24 * 60 * 60 * 1000) : null;

        // Remove all group headers
        document.querySelectorAll(".group-header-state, .group-header-district").forEach(h => h.remove());

        // Detach all data rows
        let allRows = Array.from(document.querySelectorAll(".dataRow"));
        allRows.forEach(r => r.remove());

        // Filter visible rows
        let visibleRows = allRows.filter(row => {
          let match = true;
          if (state && row.dataset.state !== state) match = false;
          if (district && row.dataset.district !== district) match = false;
          if (mandi && row.dataset.mandi !== mandi) match = false;
          if (searchVal && !row.textContent.toLowerCase().includes(searchVal)) match = false;
          if (threshold) {
            const updatedAt = parseDate(row.querySelector(".last-updated").textContent);
            if (updatedAt < threshold) match = false;
          }
          return match;
        });

        let sno = 1;

        if (!isGrouped) {
          // Sort by updatedAt descending
          visibleRows.sort((a, b) => {
            const da = parseDate(a.querySelector(".last-updated").textContent);
            const db = parseDate(b.querySelector(".last-updated").textContent);
            return db - da;
          });

          // Append sorted rows
          visibleRows.forEach(row => {
            row.querySelector(".sno").textContent = sno++;
            mandiRateRows.appendChild(row);
          });
        } else {
          // Sort by state, district, mandi, commodity
          visibleRows.sort((a, b) => {
            const ka = getGroupKeys(a);
            const kb = getGroupKeys(b);
            return ka.stateName.localeCompare(kb.stateName) ||
                   ka.district.localeCompare(kb.district) ||
                   ka.mandiName.localeCompare(kb.mandiName) ||
                   ka.commodity.localeCompare(kb.commodity);
          });

          // Build groups
          const groups = visibleRows.reduce((acc, row) => {
            const { stateName, district } = getGroupKeys(row);
            if (!acc[stateName]) acc[stateName] = {};
            if (!acc[stateName][district]) acc[stateName][district] = [];
            acc[stateName][district].push(row);
            return acc;
          }, {});

          // Append grouped
          for (let stateName in groups) {
            const stateHeader = document.createElement("tr");
            stateHeader.classList.add("group-header-state");
            stateHeader.innerHTML = `<td colspan="9"><strong>State: ${stateName}</strong></td>`;
            mandiRateRows.appendChild(stateHeader);

            for (let dist in groups[stateName]) {
              const distHeader = document.createElement("tr");
              distHeader.classList.add("group-header-district");
              distHeader.innerHTML = `<td colspan="9"><em>District: ${dist}</em></td>`;
              mandiRateRows.appendChild(distHeader);

              groups[stateName][dist].forEach(row => {
                row.querySelector(".sno").textContent = sno++;
                mandiRateRows.appendChild(row);
              });
            }
          }
        }

        // Handle add rows visibility
        const addRows = document.querySelectorAll("#mandiRateRows .addRow");
        addRows.forEach(row => {
          row.style.display = (state && district && mandi) ? "" : "none";
        });
        updateAddRowSerials();
      }

      function updateAddRowFields() {
        const state = filterState.value;
        const district = filterDistrict.value;
        const mandi = filterMandi.value;
        const stateName = state ? filterState.options[filterState.selectedIndex]?.text : '';
        const mandiObj = mandis.find(m => m.id === mandi);
        document.querySelectorAll(".addMandiName").forEach(el => el.value = mandiObj ? mandiObj.name : '');
        document.querySelectorAll(".addAddress").forEach(el =>
          el.value = [stateName, district, mandiObj ? mandiObj.name : ''].filter(Boolean).join(' / ')
        );
      }

      // Add/remove dynamic rows
      mandiRateRows.addEventListener("click", function(e) {
        if (e.target.closest(".addRowBtn")) {
          const tbody = mandiRateRows;
          const addRow = e.target.closest(".addRow");
          const newRow = addRow.cloneNode(true);
          newRow.querySelectorAll("input, select").forEach(el => el.value = "");
          newRow.querySelector(".addRowBtn").style.display = "none";
          newRow.querySelector(".removeRowBtn").style.display = "";
          updateAddRowFields();
          tbody.insertBefore(newRow, addRow);
          updateAddRowSerials();
        }
        if (e.target.closest(".removeRowBtn")) {
          e.target.closest("tr").remove();
          updateAddRowSerials();
        }
      });

      function updateAddRowSerials() {
        let idx = document.querySelectorAll("#mandiRateRows .dataRow").length + 1;
        document.querySelectorAll("#mandiRateRows .addRow").forEach((row, i) => {
          row.querySelector(".sno").textContent = idx + i;
        });
      }

      // Enter submits form
      mandiRateRows.addEventListener("keydown", function(e) {
        if (e.key === "Enter" && e.target.closest(".addRow")) {
          e.preventDefault();
          mandiRateForm.submit();
        }
      });

      // Inline edit
      mandiRateRows.addEventListener("click", function(e) {
        if (e.target.closest(".editRowBtn")) {
          document.querySelectorAll("#mandiRateRows .dataRow").forEach(row => {
            row.querySelectorAll(".editable .cell-text").forEach(t => t.style.display = "");
            row.querySelectorAll(".editable .cell-input").forEach(i => i.style.display = "none");
            row.querySelector(".editRowBtn").style.display = "inline-block";
            row.querySelector(".saveRowBtn").style.display = "none";
            row.querySelector(".cancelRowBtn").style.display = "none";
          });
          const tr = e.target.closest("tr.dataRow");
          tr.querySelectorAll(".editable .cell-text").forEach(t => t.style.display = "none");
          tr.querySelectorAll(".editable .cell-input").forEach(i => i.style.display = "block");
          tr.querySelector(".editRowBtn").style.display = "none";
          tr.querySelector(".saveRowBtn").style.display = "inline-block";
          tr.querySelector(".cancelRowBtn").style.display = "inline-block";
        }
        if (e.target.closest(".cancelRowBtn")) {
          const tr = e.target.closest("tr.dataRow");
          tr.querySelectorAll(".editable .cell-text").forEach(t => t.style.display = "");
          tr.querySelectorAll(".editable .cell-input").forEach(i => i.style.display = "none");
          tr.querySelector(".editRowBtn").style.display = "inline-block";
          tr.querySelector(".saveRowBtn").style.display = "none";
          tr.querySelector(".cancelRowBtn").style.display = "none";
        }
        if (e.target.closest(".saveRowBtn")) {
          const tr = e.target.closest("tr.dataRow");
          const mandiRateId = tr.dataset.mandirateid;
          const commodityId = tr.dataset.commodityid;
          const minimum = tr.querySelectorAll(".cell-input")[0].value;
          const maximum = tr.querySelectorAll(".cell-input")[1].value;
          const estimatedArrival = tr.querySelectorAll(".cell-input")[2].value;
          fetch(`/admin/mandirate/edit-commodity/${mandiRateId}/${commodityId}`, {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify({ minimum, maximum, estimatedArrival })
          }).then(() => window.location.reload());
        }
      });

      // Export buttons
      document.getElementById('downloadCSV').addEventListener('click', function () {
        const state = filterState.value;
        const district = filterDistrict.value;
        const mandi = filterMandi.value;
        const days = filterDays.value;
        const query = new URLSearchParams({ state, district, mandi, days }).toString();
        window.location.href = `/admin/mandirate/export/csv?${query}`;
      });

      document.getElementById('downloadExcel').addEventListener('click', function () {
        const state = filterState.value;
        const district = filterDistrict.value;
        const mandi = filterMandi.value;
        const days = filterDays.value;
        const query = new URLSearchParams({ state, district, mandi, days }).toString();
        window.location.href = `/admin/mandirate/export/excel?${query}`;
      });

      document.getElementById('downloadPDF').addEventListener('click', function () {
        const state = filterState.value;
        const district = filterDistrict.value;
        const mandi = filterMandi.value;
        const days = filterDays.value;
        const query = new URLSearchParams({ state, district, mandi, days }).toString();
        window.location.href = `/admin/mandirate/export/pdf?${query}`;
      });

      document.getElementById('downloadGroupedPDF').addEventListener('click', function () {
        const state = filterState.value;
        const district = filterDistrict.value;
        const mandi = filterMandi.value;
        const days = filterDays.value;
        const query = new URLSearchParams({ state, district, mandi, days }).toString();
        window.location.href = `/admin/mandirate/export/grouped-pdf?${query}`;
      });

      // View Last Changes
      document.getElementById('viewLastChanges').addEventListener('click', function () {
        $('#lastChangesModal').modal('show');
        loadChanges();
      });

      document.getElementById('changesDays').addEventListener('change', loadChanges);

      function loadChanges() {
        const days = document.getElementById('changesDays').value;
        const query = new URLSearchParams({ days }).toString();
        fetch(`/admin/mandirate/report?${query}`)
          .then(res => res.json())
          .then(data => {
            data.forEach(item => {
              const parts = item.address.split('/');
              item.stateName = parts[0].trim();
              item.district = parts[1].trim();
              item.mandiName = item.mandiName;
            });

            data.sort((a, b) => {
              if (a.stateName !== b.stateName) return a.stateName.localeCompare(b.stateName);
              if (a.district !== b.district) return a.district.localeCompare(b.district);
              if (a.mandiName !== b.mandiName) return a.mandiName.localeCompare(b.mandiName);
              return new Date(b.lastUpdated) - new Date(a.lastUpdated);
            });

            const groups = {};
            data.forEach(item => {
              if (!groups[item.stateName]) groups[item.stateName] = {};
              if (!groups[item.stateName][item.district]) groups[item.stateName][item.district] = {};
              if (!groups[item.stateName][item.district][item.mandiName]) groups[item.stateName][item.district][item.mandiName] = [];
              groups[item.stateName][item.district][item.mandiName].push(item);
            });

            const rows = document.getElementById('changesRows');
            rows.innerHTML = '';
            let sno = 1;

            for (const stateName in groups) {
              const stateTr = document.createElement('tr');
              stateTr.innerHTML = `<td colspan="8"><strong>State: ${stateName}</strong></td>`;
              rows.appendChild(stateTr);

              for (const dist in groups[stateName]) {
                const distTr = document.createElement('tr');
                distTr.innerHTML = `<td colspan="8"><em>District: ${dist}</em></td>`;
                rows.appendChild(distTr);

                for (const mandi in groups[stateName][dist]) {
                  const mandiTr = document.createElement('tr');
                  mandiTr.innerHTML = `<td colspan="8">Mandi: ${mandi}</td>`;
                  rows.appendChild(mandiTr);

                  groups[stateName][dist][mandi].forEach(item => {
                    const tr = document.createElement('tr');
                    tr.innerHTML = `
                      <td>${sno++}</td>
                      <td>${item.mandiName}</td>
                      <td>${item.address}</td>
                      <td>${item.commodity}</td>
                      <td>${item.minimum}</td>
                      <td>${item.maximum}</td>
                      <td>${item.estimatedArrival}</td>
                      <td>${item.lastUpdated}</td>
                    `;
                    rows.appendChild(tr);
                  });
                }
              }
            }
          });
      }

      updateAddRowFields();
      updateFormAction();
      filterTable();
    });
  </script>
<%- include('common/footer') %>```