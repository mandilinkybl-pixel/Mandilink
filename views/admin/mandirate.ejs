<%- include('common/header') %>

<div class="main-content" id="mainContent">
  <div class="container mt-4">
    <h2>Mandi Rates</h2>

    <!-- FILTERS: OnSelect-wise, instant search -->
    <div class="row g-2 mb-3">
      <div class="col-md-3">
        <select id="filterState" class="form-select">
          <option value="">Select State</option>
          <% states.forEach(state => { %>
            <option value="<%= state._id %>" <%= selectedState === state._id.toString() ? 'selected' : '' %>><%= state.name %></option>
          <% }) %>
        </select>
      </div>
      <div class="col-md-3">
        <select id="filterDistrict" class="form-select">
          <option value="">Select District</option>
          <% if (selectedDistrict) { %>
            <option value="<%= selectedDistrict %>" selected><%= selectedDistrict %></option>
          <% } %>
        </select>
      </div>
      <div class="col-md-3">
        <select id="filterMandi" class="form-select">
          <option value="">Select Mandi</option>
          <% if (selectedMandi) { %>
            <option value="<%= selectedMandi %>" selected><%= rates.find(r => r.mandi?._id.toString() === selectedMandi)?.mandi?.name %></option>
          <% } %>
        </select>
      </div>
      <div class="col-md-3">
        <input type="text" id="searchInput" class="form-control" placeholder="Search by Mandi Name or any field..." value="">
      </div>
    </div>

    <!-- Export buttons -->
    <div class="row mb-3">
      <div class="col-auto">
        <button id="downloadPDF" class="btn btn-primary">Download PDF</button>
        <button id="downloadExcel" class="btn btn-success">Download Excel</button>
        <button id="downloadCSV" class="btn btn-info">Download CSV</button>
      </div>
    </div>

    <!-- Report buttons for 10 and 30 days -->
    <div class="row mb-3">
      <div class="col-auto">
        <button id="report10Days" class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#reportModal" data-days="10">10 Days Report</button>
        <button id="report30Days" class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#reportModal" data-days="30">30 Days Report</button>
      </div>
    </div>

    <!-- Form for adding/updating rates -->
    <form id="mandiRateForm" action="/admin/mandirate/add" method="POST">
      <input type="hidden" name="state" id="formState" value="<%= selectedState %>">
      <input type="hidden" name="district" id="formDistrict" value="<%= selectedDistrict %>">
      <input type="hidden" name="mandi" id="formMandi" value="<%= selectedMandi %>">
      <div class="mb-3">
        <label for="existingMandiRate" class="form-label">Add to Existing Mandi Rate (Optional)</label>
        <select id="existingMandiRate" class="form-select" onchange="updateFormAction()">
          <option value="">Create New Mandi Rate</option>
          <% rates.forEach(rate => { %>
            <option value="<%= rate._id %>">
              <%= rate.mandi?.name %> (<%= rate.state?.name %> / <%= rate.district %>)
            </option>
          <% }) %>
        </select>
      </div>
      <table class="table table-bordered" id="mandiRateTable">
        <thead>
          <tr>
            <th>Sl No</th>
            <th>Mandi Name</th>
            <th>Address (State/District/Mandi)</th>
            <th>Commodity</th>
            <th>Min Price</th>
            <th>Max Price</th>
            <th>Est. Qty</th>
            <th>Last Updated</th>
            <th>Action</th>
          </tr>
        </thead>
        <tbody id="mandiRateRows">
          <% let sno = 1; %>
          <% rates.forEach((rate) => { %>
            <% rate.rates.forEach((item) => { %>
              <tr class="dataRow"
                  data-state="<%= rate.state?._id %>"
                  data-district="<%= rate.district %>"
                  data-mandi="<%= rate.mandi?._id %>"
                  data-mandirateid="<%= rate._id %>"
                  data-commodityid="<%= item.commodity?._id %>">
                <td class="sno"><%= sno++ %></td>
                <td><%= rate.mandi?.name %></td>
                <td>
                  <span><%= rate.state?.name %></span> /
                  <span><%= rate.district %></span> /
                  <span><%= rate.mandi?.name %></span>
                </td>
                <td>
                  <span class="cell-text"><%= item.commodity?.name %></span>
                </td>
                <td>
                  <span class="cell-text"><%= item.minimum %></span>
                  <input type="number" class="form-control cell-input" min="0" step="0.01" value="<%= item.minimum %>" style="display:none;" required>
                </td>
                <td>
                  <span class="cell-text"><%= item.maximum %></span>
                  <input type="number" class="form-control cell-input" min="0" step="0.01" value="<%= item.maximum %>" style="display:none;" required>
                </td>
                <td>
                  <span class="cell-text"><%= item.estimatedArrival ?? "" %></span>
                  <input type="number" class="form-control cell-input" min="0" step="0.01" value="<%= item.estimatedArrival ?? "" %>" style="display:none;">
                </td>
                <td>
                  <span class="last-updated">
                    <% 
                      let updatedAt = item.updatedAt || rate.updatedAt;
                      function formatDate(dateStr) {
                        if (!dateStr) return "";
                        const dateObj = new Date(dateStr);
                        return dateObj.toLocaleString('en-IN', {
                          day: '2-digit', month: '2-digit', year: 'numeric',
                          hour: '2-digit', minute: '2-digit'
                        });
                      }
                    %>
                    <%= formatDate(updatedAt) %>
                  </span>
                </td>
                <td>
                  <button type="button" class="btn btn-sm btn-primary editRowBtn" title="Edit"><i class="bi bi-pencil-square"></i></button>
                  <button type="button" class="btn btn-sm btn-success saveRowBtn" style="display:none;" title="Update"><i class="bi bi-check2"></i></button>
                  <button type="button" class="btn btn-sm btn-secondary cancelRowBtn" style="display:none;" title="Cancel"><i class="bi bi-x"></i></button>
                  <form action="/admin/mandirate/delete-commodity/<%= rate._id %>/<%= item.commodity?._id %>" method="POST" style="display:inline;">
                    <button type="submit" class="btn btn-sm btn-danger" onclick="return confirm('Delete this rate?')" title="Delete">
                      <i class="bi bi-trash"></i>
                    </button>
                  </form>
                </td>
              </tr>
            <% }) %>
          <% }) %>
          <!-- ADD ROW (always at bottom, can add more with plus icon, and Save All) -->
          <tr class="addRow">
            <td class="sno"></td>
            <td>
              <input type="text" class="form-control" id="addMandiName" value="" readonly>
            </td>
            <td>
              <input type="text" class="form-control" id="addAddress" value="" readonly>
            </td>
            <td>
              <select name="commodity_ids[]" class="form-select" required>
                <option value="">Select Commodity</option>
                <% commodities.forEach(com => { %>
                  <option value="<%= com._id %>"><%= com.name %></option>
                <% }) %>
              </select>
            </td>
            <td><input type="number" name="minimums[]" class="form-control" min="0" step="0.01" required></td>
            <td><input type="number" name="maximums[]" class="form-control" min="0" step="0.01" required></td>
            <td><input type="number" name="arrivals[]" class="form-control" min="0" step="0.01"></td>
            <td>-</td>
            <td>
              <button type="button" class="btn btn-success addRowBtn"><i class="bi bi-plus-circle"></i></button>
              <button type="button" class="btn btn-danger removeRowBtn" style="display:none;"><i class="bi bi-x-circle"></i></button>
            </td>
          </tr>
        </tbody>
      </table>
      <button type="submit" class="btn btn-success" id="saveAllBtn">Save All</button>
    </form>
  </div>

  <!-- Report Modal -->
  <div class="modal fade" id="reportModal" tabindex="-1" aria-labelledby="reportModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg">
      <div class="modal-content">
        <div class="modal-header">
          <h5 class="modal-title" id="reportModalLabel">Mandi Rates Report</h5>
          <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
        </div>
        <div class="modal-body">
          <table class="table table-bordered" id="reportTable">
            <thead>
              <tr>
                <th>Sl No</th>
                <th>Mandi Name</th>
                <th>Address</th>
                <th>Commodity</th>
                <th>Min Price</th>
                <th>Max Price</th>
                <th>Est. Qty</th>
                <th>Last Updated</th>
              </tr>
            </thead>
            <tbody id="reportTableBody"></tbody>
          </table>
        </div>
        <div class="modal-footer">
          <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
          <button type="button" class="btn btn-primary" id="downloadReportPDF">Download PDF</button>
        </div>
      </div>
    </div>
  </div>

  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.5/font/bootstrap-icons.css">

  <script>
    document.addEventListener("DOMContentLoaded", function() {
      const filterState = document.getElementById("filterState");
      const filterDistrict = document.getElementById("filterDistrict");
      const filterMandi = document.getElementById("filterMandi");
      const searchInput = document.getElementById("searchInput");
      const mandiRateRows = document.getElementById("mandiRateRows");
      const mandiRateForm = document.getElementById("mandiRateForm");
      const existingMandiRate = document.getElementById("existingMandiRate");
      const reportModal = document.getElementById("reportModal");
      const reportTableBody = document.getElementById("reportTableBody");
      const reportModalLabel = document.getElementById("reportModalLabel");
      let mandis = [];
      let currentReportDays = null;

      // Update form action based on existingMandiRate selection
      function updateFormAction() {
        const mandiRateId = existingMandiRate.value;
        mandiRateForm.action = mandiRateId
          ? `/admin/mandirate/add-multiple-commodities/${mandiRateId}`
          : "/admin/mandirate/add";
      }

      // State, District, Mandi filters
      filterState.addEventListener("change", async function() {
        filterDistrict.innerHTML = '<option value="">Select District</option>';
        filterMandi.innerHTML = '<option value="">Select Mandi</option>';
        document.getElementById("formState").value = this.value;
        if (!this.value) {
          filterTable();
          updateAddRowFields();
          return;
        }
        try {
          const res = await fetch(`/admin/mandirate/districts/${this.value}`);
          if (!res.ok) throw new Error("Failed to fetch districts");
          const districts = await res.json();
          districts.forEach(d => {
            const opt = document.createElement("option");
            opt.value = d;
            opt.textContent = d;
            filterDistrict.appendChild(opt);
          });
          filterTable();
          updateAddRowFields();
        } catch (err) {
          console.error("Error fetching districts:", err);
          alert("Error fetching districts");
        }
      });

      filterDistrict.addEventListener("change", async function() {
        filterMandi.innerHTML = '<option value="">Select Mandi</option>';
        document.getElementById("formDistrict").value = this.value;
        if (!this.value) {
          filterTable();
          updateAddRowFields();
          return;
        }
        try {
          const res = await fetch(`/admin/mandirate/mandis/${this.value}`);
          if (!res.ok) throw new Error("Failed to fetch mandis");
          mandis = await res.json();
          mandis.forEach(m => {
            const opt = document.createElement("option");
            opt.value = m.id;
            opt.textContent = m.name;
            filterMandi.appendChild(opt);
          });
          filterTable();
          updateAddRowFields();
        } catch (err) {
          console.error("Error fetching mandis:", err);
          alert("Error fetching mandis");
        }
      });

      filterMandi.addEventListener("change", async function() {
        document.getElementById("formMandi").value = this.value;
        if (this.value) {
          const mandi = mandis.find(m => m.id === this.value);
          if (mandi && mandi.state) {
            document.getElementById("formState").value = mandi.state;
            const stateOption = filterState.querySelector(`option[value="${mandi.state}"]`);
            if (stateOption) {
              filterState.value = mandi.state;
              filterState.dispatchEvent(new Event("change"));
            }
          }
        }
        filterTable();
        updateAddRowFields();
      });

      searchInput.addEventListener("input", filterTable);

      function filterTable() {
        const state = filterState.value;
        const district = filterDistrict.value;
        const mandi = filterMandi.value;
        const searchVal = searchInput.value.toLowerCase();
        let sno = 1;
        document.querySelectorAll("#mandiRateRows .dataRow").forEach(row => {
          let match = true;
          if (state && row.dataset.state !== state) match = false;
          if (district && row.dataset.district !== district) match = false;
          if (mandi && row.dataset.mandi !== mandi) match = false;
          if (searchVal && !row.textContent.toLowerCase().includes(searchVal)) match = false;
          row.style.display = match ? "" : "none";
          if (match) row.querySelector(".sno").textContent = sno++;
        });
        const addRows = document.querySelectorAll("#mandiRateRows .addRow");
        addRows.forEach(row => {
          row.style.display = (state && district && mandi) ? "" : "none";
          row.querySelector(".sno").textContent = sno;
        });
      }
      filterTable();

      function updateAddRowFields() {
        const state = filterState.value;
        const district = filterDistrict.value;
        const mandi = filterMandi.value;
        const stateName = state ? filterState.options[filterState.selectedIndex]?.text : '';
        const mandiObj = mandis.find(m => m.id === mandi);
        document.querySelectorAll("#addMandiName").forEach(el => el.value = mandiObj ? mandiObj.name : '');
        document.querySelectorAll("#addAddress").forEach(el =>
          el.value = [stateName, district, mandiObj ? mandiObj.name : ''].filter(Boolean).join(' / ')
        );
      }

      // Add/remove dynamic rows
      mandiRateRows.addEventListener("click", function(e) {
        if (e.target.closest(".addRowBtn")) {
          const tbody = mandiRateRows;
          const addRow = e.target.closest(".addRow");
          const newRow = addRow.cloneNode(true);
          newRow.querySelectorAll("input, select").forEach(el => {
            if (el.type !== "text" || !el.readOnly) el.value = "";
          });
          newRow.querySelector(".addRowBtn").style.display = "none";
          newRow.querySelector(".removeRowBtn").style.display = "";
          updateAddRowFields();
          tbody.insertBefore(newRow, addRow.nextSibling);
          updateAddRowSerials();
        }
        if (e.target.closest(".removeRowBtn")) {
          e.target.closest("tr").remove();
          updateAddRowSerials();
        }
      });

      function updateAddRowSerials() {
        let idx = document.querySelectorAll("#mandiRateRows .dataRow:not([style*='display: none'])").length + 1;
        document.querySelectorAll("#mandiRateRows .addRow").forEach((row, i) => {
          row.querySelector(".sno").textContent = idx + i;
        });
      }

      // Enter submits form
      mandiRateRows.addEventListener("keydown", function(e) {
        if (e.key === "Enter" && e.target.closest(".addRow")) {
          e.preventDefault();
          mandiRateForm.submit();
        }
      });

      // Inline edit
      mandiRateRows.addEventListener("click", function(e) {
        if (e.target.closest(".editRowBtn")) {
          document.querySelectorAll("#mandiRateRows .dataRow").forEach(row => {
            row.querySelectorAll(".cell-text").forEach(t => t.style.display = "");
            row.querySelectorAll(".cell-input").forEach(i => i.style.display = "none");
            row.querySelector(".editRowBtn").style.display = "inline-block";
            row.querySelector(".saveRowBtn").style.display = "none";
            row.querySelector(".cancelRowBtn").style.display = "none";
          });
          const tr = e.target.closest("tr.dataRow");
          tr.querySelectorAll(".cell-text").forEach(t => t.style.display = "none");
          tr.querySelectorAll(".cell-input").forEach(i => i.style.display = "block");
          tr.querySelector(".editRowBtn").style.display = "none";
          tr.querySelector(".saveRowBtn").style.display = "inline-block";
          tr.querySelector(".cancelRowBtn").style.display = "inline-block";
        }
        if (e.target.closest(".cancelRowBtn")) {
          const tr = e.target.closest("tr.dataRow");
          tr.querySelectorAll(".cell-text").forEach(t => t.style.display = "");
          tr.querySelectorAll(".cell-input").forEach(i => i.style.display = "none");
          tr.querySelector(".editRowBtn").style.display = "inline-block";
          tr.querySelector(".saveRowBtn").style.display = "none";
          tr.querySelector(".cancelRowBtn").style.display = "none";
        }
        if (e.target.closest(".saveRowBtn")) {
          const tr = e.target.closest("tr.dataRow");
          const mandiRateId = tr.dataset.mandirateid;
          const commodityId = tr.dataset.commodityid;
          const minimum = tr.querySelectorAll(".cell-input")[0].value;
          const maximum = tr.querySelectorAll(".cell-input")[1].value;
          const estimatedArrival = tr.querySelectorAll(".cell-input")[2].value;
          fetch(`/admin/mandirate/edit-commodity/${mandiRateId}/${commodityId}`, {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify({ minimum, maximum, estimatedArrival })
          })
            .then(res => res.json())
            .then(data => {
              if (data.error) {
                alert(data.error);
              } else {
                window.location.reload();
              }
            })
            .catch(err => {
              console.error("Error updating commodity:", err);
              alert("Error updating commodity");
            });
        }
      });

      // Function to get current filters
      function getFilters() {
        return {
          state: filterState.value,
          district: filterDistrict.value,
          mandi: filterMandi.value
        };
      }

      // Export buttons
      document.getElementById('downloadCSV').addEventListener('click', function () {
        const query = new URLSearchParams(getFilters()).toString();
        window.location.href = `/admin/mandirate/export/csv?${query}`;
      });

      document.getElementById('downloadExcel').addEventListener('click', function () {
        const query = new URLSearchParams(getFilters()).toString();
        window.location.href = `/admin/mandirate/export/excel?${query}`;
      });

      document.getElementById('downloadPDF').addEventListener('click', function () {
        const query = new URLSearchParams(getFilters()).toString();
        window.location.href = `/admin/mandirate/export/pdf?${query}`;
      });

      // Report modal handling
      reportModal.addEventListener('show.bs.modal', function (event) {
        const button = event.relatedTarget;
        currentReportDays = button.getAttribute('data-days');
        const filters = getFilters();
        filters.days = currentReportDays;
        const query = new URLSearchParams(filters).toString();
        reportModalLabel.textContent = `Mandi Rates Report (${currentReportDays} Days)`;
        reportTableBody.innerHTML = '<tr><td colspan="8" class="text-center">Loading...</td></tr>';

        fetch(`/admin/mandirate/report/${currentReportDays}?${query}`)
          .then(res => res.json())
          .then(data => {
            reportTableBody.innerHTML = '';
            if (data.error) {
              reportTableBody.innerHTML = `<tr><td colspan="8" class="text-center">${data.error}</td></tr>`;
              return;
            }
            if (data.length === 0) {
              reportTableBody.innerHTML = '<tr><td colspan="8" class="text-center">No data available</td></tr>';
              return;
            }
            data.forEach(row => {
              const tr = document.createElement('tr');
              tr.innerHTML = `
                <td>${row.sno}</td>
                <td>${row.mandiName}</td>
                <td>${row.address}</td>
                <td>${row.commodity}</td>
                <td>${row.minimum}</td>
                <td>${row.maximum}</td>
                <td>${row.estimatedArrival}</td>
                <td>${row.lastUpdated}</td>
              `;
              reportTableBody.appendChild(tr);
            });
          })
          .catch(err => {
            console.error("Error fetching report data:", err);
            reportTableBody.innerHTML = '<tr><td colspan="8" class="text-center">Error loading report</td></tr>';
          });
      });

      // Download report as PDF
      document.getElementById('downloadReportPDF').addEventListener('click', function () {
        const filters = getFilters();
        filters.days = currentReportDays;
        const query = new URLSearchParams(filters).toString();
        window.location.href = `/admin/mandirate/export/pdf?${query}`;
      });

      updateAddRowFields();
      updateFormAction();
    });
  </script>
<%- include('common/footer') %>